// <auto-generated />
using System;
using Infrastructure.DbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(BotDbContext))]
    partial class BotDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Bot.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Step")
                        .HasColumnType("integer");

                    b.Property<string>("StepData")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Admins");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Step = 0,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Domain.Entities.Bot.BotMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Command")
                        .HasColumnType("integer");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("BotMessages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Command = 1,
                            Message = "🌐 سلام <NAME> عزیز!\r\nبه ربات رسمی وی‌پی‌ان 404 خوش اومدی! 🚀\r\n\r\nاینجا قراره با چند کلیک ساده، به یه اینترنت آزاد، پرسرعت و امن دسترسی داشته باشی! 🔓⚡️\r\nما بهت قول می‌دیم دیگه با محدودیت خداحافظی کنی! 💥\r\n\r\nبرای شروع، یکی از گزینه‌های زیر رو انتخاب کن و از تجربه بی‌دغدغه اینترنت لذت ببر 😎👇\r\n\r\n✨ امنیت بالا، سرعت خفن، قیمت منصفانه\r\n💬 هر سوالی داشتی، <a href='https://t.me/the404vpnSupport'>پشتیبانی</a> همیشه آنلاینه!\r\n\r\n🆔 @the404vpnRobot"
                        },
                        new
                        {
                            Id = 10,
                            Command = 10,
                            Message = "🌐 سلام <NAME> عزیز!\r\nبه ربات رسمی وی‌پی‌ان 404 خوش اومدی! 🚀\r\n\r\nاینجا قراره با چند کلیک ساده، به یه اینترنت آزاد، پرسرعت و امن دسترسی داشته باشی! 🔓⚡️\r\nما بهت قول می‌دیم دیگه با محدودیت خداحافظی کنی! 💥\r\n\r\nبرای شروع، یکی از گزینه‌های زیر رو انتخاب کن و از تجربه بی‌دغدغه اینترنت لذت ببر 😎👇\r\n\r\n✨ امنیت بالا، سرعت خفن، قیمت منصفانه\r\n💬 هر سوالی داشتی، <a href='https://t.me/the404vpnSupport'>پشتیبانی</a> همیشه آنلاینه!\r\n\r\n🆔 @the404vpnRobot"
                        },
                        new
                        {
                            Id = 2,
                            Command = 2,
                            Message = "🛍 انتخاب سرویس، قدم اول به سوی آزادی بی‌مرز در اینترنت!\r\n\r\n📦 ما برات مجموعه‌ای از سرویس‌های حرفه‌ای آماده کردیم که هم از نظر سرعت و امنیت فوق‌العاده‌ان، هم از نظر قیمت، کاملاً منصفانه! \r\n\r\n✨ فقط کافیه پلنی که مناسب توئه رو انتخاب کنی و در کمتر از چند ثانیه، وصل شی به یه دنیای بدون محدودیت!\r\n\r\n💡 نکته مهم: هر سرویس با توجه به نیازت طراحی شده \r\nچه کاربر روزمره باشی، تریدر, استریمر یا گیمر حرفه‌ای 🎮\r\n\r\n👇 از لیست زیر پلن دلخواهتو انتخاب کن و برو برای اتصال بی‌دغدغه!"
                        },
                        new
                        {
                            Id = 3,
                            Command = 3,
                            Message = "♻️ یکی از سرویس هایه مورد نظر برای تمدیدت رو انتخاب کن"
                        },
                        new
                        {
                            Id = 4,
                            Command = 4,
                            Message = "📦 سرویس‌های فعال شما\r\n\r\nاینجا می‌تونی مشخصات همه‌ی سرویس‌هات رو ببینی، وضعیتشون رو چک کنی و اگه لازم بود تمدید یا ارتقاشون بدی \r\n👇 لیست سرویس‌های شما:"
                        },
                        new
                        {
                            Id = 5,
                            Command = 5,
                            Message = "🔋 افزایش حجم سرویس\r\n\r\nسرویس انتخاب‌شده: <TITLE> ✅\r\nحالا فقط کافیه مقدار حجمی که نیاز داری رو انتخاب کنی 👇\r\n\r\n📦 هر چقدر بیشتر، اتصال طولانی‌تر و بی‌دردسرتر!"
                        },
                        new
                        {
                            Id = 6,
                            Command = 6,
                            Message = "TextMessage-PlansMessage"
                        },
                        new
                        {
                            Id = 7,
                            Command = 7,
                            Message = "💰 کیف پول شما\r\nاز موجودیت می‌تونی برای خرید، تمدید یا افزایش حجم استفاده کنی ✨\r\n\r\nهمچنین برای شارژ حساب روی دکمه زیر کلیک کنید"
                        },
                        new
                        {
                            Id = 8,
                            Command = 8,
                            Message = "🛟 نیاز به راهنمایی یا مشکلی پیش اومده؟\r\n\r\nنگران نباش، تیم پشتیبانی ما اینجاست تا هر زمان که نیاز داشتی، کنارت باشه 🙌\r\nچه مشکلت مربوط به خرید، اتصال، یا هر مورد دیگه‌ای باشه، فقط کافیه به پشتیبانی پیام بدی تا سریع راهنماییت کنیم 🛠💬\r\n\r\n🆔 آیدی پشتیبانی:\r\n@the404vpnSupport\r\n\r\n🕒 ساعات پاسخ‌گویی: شبانه روز, حتی روزهای تعطیل!\r\n\r\n✨ ما بهت قول می‌دیم تجربه‌ات از 404 نت همیشه راحت، شفاف و بدون دغدغه باشه.\r\nدر هر مرحله‌ای که بودی، پشتیبانی یه پیام باهاته 🤝"
                        },
                        new
                        {
                            Id = 9,
                            Command = 9,
                            Message = "پیام راهنما"
                        },
                        new
                        {
                            Id = 14,
                            Command = 14,
                            Message = "🧾 جزئیات سرویس شما\r\n\r\n📌 نام نمایشی: <TITLE>\r\n🌐 سرویس: <SERVICE>\r\n📶 وضعیت: <STATUS>\r\n📝 یادداشت: <NOTE>\r\n\r\n✨ برای مدیریت سرویس‌ات میتونی از دکمه های زیر استفاده کنی"
                        },
                        new
                        {
                            Id = 15,
                            Command = 15,
                            Message = "سرویس انتخاب شده - وارد کردن حجم"
                        },
                        new
                        {
                            Id = 16,
                            Command = 16,
                            Message = "سرویس انتخاب شده جهت تمدید - تعداد ماه"
                        },
                        new
                        {
                            Id = 17,
                            Command = 17,
                            Message = "💳 شارژ کیف پول\r\n📌 با شارژ کیف پول، خرید و تمدید سرویس‌ها سریع‌تر و راحت‌تر انجام می‌شه!\r\n\r\nحالا مبلغ موردنظرت رو برای شارژ حساب وارد کن 👇"
                        },
                        new
                        {
                            Id = 18,
                            Command = 18,
                            Message = "💰 مبلغ وارد شده: <AMOUNT>\r\n\r\nحالا فقط کافیه روش پرداختت رو انتخاب کنی 👇"
                        },
                        new
                        {
                            Id = 19,
                            Command = 19,
                            Message = "روش پرداخت: کارت به کارت🏦 روش پرداخت: کارت به کارت\r\n\r\n💳 مبلغ: <code><AMOUNT></code>\r\n\r\n🔢 شماره کارت: <code><CARD></code>\r\n\r\nلطفاً مبلغ رو به شماره کارت بالا واریز کن و رسید پرداخت رو همینجا برای ما ارسال کن ✅\r\n📌 بعد از تایید، کیف پولت به‌صورت خودکار شارژ می‌شه و شمارو در اطلاع میزاریم\r\n\r\n🛟 مشکلی داشتی؟ پشتیبانی همیشه در دسترسته: @the404vpnSupport"
                        },
                        new
                        {
                            Id = 11,
                            Command = 11,
                            Message = "سرویس انتخاب شده: <NAME>\r\nانتخاب مدت زمان سرویس:"
                        },
                        new
                        {
                            Id = 12,
                            Command = 12,
                            Message = "سرویس انتخاب شده: <NAME>\r\nمدت زمان سرویس: <MONTH>\r\nانتخاب ترافیک:"
                        },
                        new
                        {
                            Id = 13,
                            Command = 13,
                            Message = "🧾 فاکتور سرویس شما آماده‌ست!\r\n\r\nهمه‌چیز برای شروع یه تجربه سریع، امن و بدون محدودیت آماده‌ست! 🚀\r\n\r\n🔹 سرویس انتخاب‌شده: <NAME>\r\n📅 مدت زمان: <MONTH> ماه\r\n📦 حجم: <TRAFFIC> گیگ\r\n\r\n💰 مبلغ نهایی: <PRICE> تومان\r\n\r\n✨ با پرداخت این فاکتور، فقط چند ثانیه تا اتصال به یه اینترنت پایدار و پرسرعت فاصله داری!\r\n👇 حالا فقط کافیه روش پرداختتو انتخاب کنی و بریم برای فعال‌سازی"
                        },
                        new
                        {
                            Id = 22,
                            Command = 22,
                            Message = "✨ جزئیات سرویس اختصاصی شما\r\n📌 نام نمایشی: <code><TITLE></code>\r\n🌐 نوع سرویس: <code><SERVICE></code>\r\n⚙️ وضعیت فعلی: <code><STATUS></code>\r\n📝 یادداشت اختصاصی: <code><NOTE></code>\r\n\r\n🕰 تاریخ شروع: <b><CREATE></b>\r\n⏳ تاریخ پایان: <b><EXPIRE></b>\r\n📊 مصرف شما تا این لحظه:\r\n<USED> گیگ از <BANDWIDTH> گیگ\r\n"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Bot.BotSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("BotSettings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Key = "DOMAIN",
                            Value = "https://library98.ir/"
                        },
                        new
                        {
                            Id = 2,
                            Key = "STATUS",
                            Value = "1"
                        },
                        new
                        {
                            Id = 3,
                            Key = "MIN_AMOUNT",
                            Value = "50000"
                        },
                        new
                        {
                            Id = 4,
                            Key = "MAX_AMOUNT",
                            Value = "500000"
                        },
                        new
                        {
                            Id = 5,
                            Key = "RECEIPT_CHATID",
                            Value = "-1002583876730"
                        },
                        new
                        {
                            Id = 6,
                            Key = "CARD",
                            Value = "0000000000000000"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Bot.Discount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Capacity")
                        .HasColumnType("integer");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DiscountPercent")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Discounts");
                });

            modelBuilder.Entity("Domain.Entities.Bot.Factor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<string>("UniqueKey")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int?>("UserSubscriptionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("UserSubscriptionId");

                    b.ToTable("Factors");
                });

            modelBuilder.Entity("Domain.Entities.Bot.MonthPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Month")
                        .HasColumnType("integer");

                    b.Property<int>("PricePerMonth")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("MonthPlans");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Month = 1,
                            PricePerMonth = 5000
                        },
                        new
                        {
                            Id = 2,
                            Month = 3,
                            PricePerMonth = 3000
                        },
                        new
                        {
                            Id = 3,
                            Month = 6,
                            PricePerMonth = 2000
                        });
                });

            modelBuilder.Entity("Domain.Entities.Bot.TrafficPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Bandwidth")
                        .HasColumnType("integer");

                    b.Property<int>("MonthPlanId")
                        .HasColumnType("integer");

                    b.Property<int>("PricePerGb")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MonthPlanId");

                    b.ToTable("TrafficPlans");

                    b.HasData(
                        new
                        {
                            Id = 7,
                            Bandwidth = 150,
                            MonthPlanId = 3,
                            PricePerGb = 2000
                        },
                        new
                        {
                            Id = 8,
                            Bandwidth = 200,
                            MonthPlanId = 3,
                            PricePerGb = 1800
                        },
                        new
                        {
                            Id = 9,
                            Bandwidth = 450,
                            MonthPlanId = 3,
                            PricePerGb = 1500
                        },
                        new
                        {
                            Id = 4,
                            Bandwidth = 30,
                            MonthPlanId = 2,
                            PricePerGb = 2750
                        },
                        new
                        {
                            Id = 5,
                            Bandwidth = 60,
                            MonthPlanId = 2,
                            PricePerGb = 2650
                        },
                        new
                        {
                            Id = 6,
                            Bandwidth = 90,
                            MonthPlanId = 2,
                            PricePerGb = 2500
                        },
                        new
                        {
                            Id = 1,
                            Bandwidth = 15,
                            MonthPlanId = 1,
                            PricePerGb = 3000
                        },
                        new
                        {
                            Id = 2,
                            Bandwidth = 30,
                            MonthPlanId = 1,
                            PricePerGb = 2850
                        },
                        new
                        {
                            Id = 3,
                            Bandwidth = 45,
                            MonthPlanId = 1,
                            PricePerGb = 2750
                        });
                });

            modelBuilder.Entity("Domain.Entities.Bot.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("DiscountId")
                        .HasColumnType("integer");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<DateTime>("JoinDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<int>("Step")
                        .HasColumnType("integer");

                    b.Property<string>("StepData")
                        .HasColumnType("text");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Username")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DiscountId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FirstName = "Main",
                            JoinDate = new DateTime(2025, 4, 19, 10, 20, 14, 158, DateTimeKind.Utc).AddTicks(6503),
                            LastName = "Admin",
                            Step = 0,
                            StepData = "",
                            UserId = 7880935437L,
                            Username = "MrMorphling"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Bot.Wallet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Balance")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Wallets");
                });

            modelBuilder.Entity("Domain.Entities.Vpn.ApiInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ApiInfos");
                });

            modelBuilder.Entity("Domain.Entities.Vpn.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Capacity")
                        .HasColumnType("integer");

                    b.Property<int>("Index")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<long>("Price")
                        .HasColumnType("bigint");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("Domain.Entities.Vpn.UserSubscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Bandwidth")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ExpireTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ServiceId")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.HasIndex("UserId");

                    b.ToTable("UsersSubscriptions");
                });

            modelBuilder.Entity("Domain.Entities.Bot.Admin", b =>
                {
                    b.HasOne("Domain.Entities.Bot.User", "User")
                        .WithOne("Admin")
                        .HasForeignKey("Domain.Entities.Bot.Admin", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Bot.Factor", b =>
                {
                    b.HasOne("Domain.Entities.Bot.User", "User")
                        .WithMany("UserFactors")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Vpn.UserSubscription", "UserSubscription")
                        .WithMany()
                        .HasForeignKey("UserSubscriptionId");

                    b.Navigation("User");

                    b.Navigation("UserSubscription");
                });

            modelBuilder.Entity("Domain.Entities.Bot.TrafficPlan", b =>
                {
                    b.HasOne("Domain.Entities.Bot.MonthPlan", "MonthPlan")
                        .WithMany("TrafficPlans")
                        .HasForeignKey("MonthPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MonthPlan");
                });

            modelBuilder.Entity("Domain.Entities.Bot.User", b =>
                {
                    b.HasOne("Domain.Entities.Bot.Discount", "Discount")
                        .WithMany("Users")
                        .HasForeignKey("DiscountId");

                    b.Navigation("Discount");
                });

            modelBuilder.Entity("Domain.Entities.Bot.Wallet", b =>
                {
                    b.HasOne("Domain.Entities.Bot.User", "User")
                        .WithOne("Wallet")
                        .HasForeignKey("Domain.Entities.Bot.Wallet", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Vpn.UserSubscription", b =>
                {
                    b.HasOne("Domain.Entities.Vpn.Service", "Service")
                        .WithMany("UsersSubscriptions")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Bot.User", "User")
                        .WithMany("UserSubscriptions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Bot.Discount", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Domain.Entities.Bot.MonthPlan", b =>
                {
                    b.Navigation("TrafficPlans");
                });

            modelBuilder.Entity("Domain.Entities.Bot.User", b =>
                {
                    b.Navigation("Admin");

                    b.Navigation("UserFactors");

                    b.Navigation("UserSubscriptions");

                    b.Navigation("Wallet")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Vpn.Service", b =>
                {
                    b.Navigation("UsersSubscriptions");
                });
#pragma warning restore 612, 618
        }
    }
}
